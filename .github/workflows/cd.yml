name: CD

on:
  push:
    branches:
      - "master"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  POETRY_VERSION: 1.5.1

jobs:
  create-virtualenv:
    runs-on: ubuntu-latest
    steps:
      - name: source code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction -vv

      - name: Log currently installed packages and versions
        run: poetry show

  release:
    needs: create-virtualenv
    runs-on: ubuntu-latest
    steps:
      - name: source code
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/checkout@v4

      - name: Set up Python
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/setup-python@v5

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Release to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          POETRY_VERSION: ${{ env.POETRY_VERSION }}
        run: |
          poetry build
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish
